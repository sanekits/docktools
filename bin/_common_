# docktools/_common_
#  Code shared by multiple docktools scripts

PS4='\033[0;33m+(${BASH_SOURCE}:${LINENO}):\033[0m ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

die() {
    echo "ERROR: $@" >&1
    exit 1
}

_show_containers() {
    # Print the list of running container names, like
    #  focused_mendeleev
    #  elegant_blackwell
    docker ps --format "{{.Names}}"
}

_dk_exec() {
    command docker exec -i "$container" "$@"
}

_show_users_in_containers() {
    # List users with /home dirs in containers (plus root)
    # Output is like:
    #    username:userid
    # If --include-container-name:
    #    elegant_blackwell:username:userid
    # If --no-uid
    #    username
    #    elegant_blackwell:username
    local containers=() include_container_name=false include_uid=true
    for arg; do
        case $arg in
            --include-container-name) include_container_name=true;;
            --no-uid) include_uid=false;;
            *) containers+=( $1 ) ;;
        esac
        shift
    done
    for container in "${containers[@]}"; do
        local users=(root) user
        for user in $(_dk_exec ls /home); do
            users+=($user)
        done
        for user in ${users[@]}; do
            local ux="" xuid=$(_dk_exec id -u "$user")

            $include_uid \
                && ux="$user:$xuid" \
                || ux="$user";

            $include_container_name \
                && echo "${container}:${ux}"  \
                || echo "$ux";

            printf "\n";
        done
    done
}

_pick_container() {
    # Present a list of containers.  Interactively select
    # an entry.  All output on &2 except final result
    #
    #  Prints [container-name]
    #
    PS3="Choose container or Ctrl+C to quit:"
    unset IFS; select result in $( _show_containers ); do
        echo "$result"
        return
    done
}

_pick_container_and_user() {
    # Present a list of containers and their available users (users
    # are identified by scanning /home dirs).  Interactively select
    # an entry.
    #
    # Prints [container-name] [user-name]
    #
    local entries=()
    unset IFS; for cc in $( _show_containers ); do
        for xu in $(_show_users_in_containers "$cc" --include-container-name --no-uid ); do
            entries+=( $xu )
        done
    done
    if [[ ${#entries} -eq 0 ]]; then
        echo "No docker containers are running" >&2
        false;
        return
    fi
    PS3="Choose entry or Ctrl+C to quit: "
    select entry in ${entries[@]} ; do
        echo $entry
        return
    done
}

_dk_launch_shell() {
    # Given a container and user, open a shell for that user in the container.
    local container=$1
    local user=$2
    [[ -n $container && -n $user ]] || {
        echo "ERROR: _dk_launch_shell requires both container and user" >&2
        false
        return
    }

    shift 2
    docker exec -it -u "$user" "$container" bash -l
}

_install_container_kits() {
    # Install given kits into container as given user.   If
    # both 'user_id' and 'user' are provided, the user_id takes precedence.
    # Fails if user is not root and chosen user doesn't exist.
    local container="$1"; shift
    local user="$1"; shift
    local user_id="$1"; shift
    local kits="$@"
    local xuser=$user
    [[ -n $user_id ]] \
        && xuser=$user_id


    [[ -z "$kits" ]] && \
        return
    local cmd="docktools-bootstrap-container.sh  \
        --container-name $container \
        --user $xuser \
        $kits"
    eval "$cmd"
}
